spring:
  application:
    name: zuul-provider
  redis:
    host: 127.0.0.1
    port: 6379
server:
  port: 9096

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8763/eureka/,http://localhost:8762/eureka/,http://localhost:8761/eureka/
#这个的意思是，配置在erueka里面叫erueka-provider的服务。
#只要是api开头的url都会被转发到指定的服务上面
#如果path配置成'/**/api/**'的话，会跳转，不过所有的url都会映射到后端
#如果path配置成'/api/**'的话，会跳转，并且忽略掉'/api'部分
zuul:
  routes:
    erueka-provider-inner:
      path: /inner/**
    erueka-provider-outside:
      path: /outside/**
  # 指定路由关闭重试机制
  #zuul.routes.<route>.retryable=false
  # 全局关闭重试机制
  retryable: false
  add-host-header: true #设置为true重定向是会添加host请求头
    #zuul.sensitiveHeaders设置为空，代表不过滤任何Header信息，Header会向下转发
  sensitive-headers:
  #配置过滤敏感的请求头信息，设置为空就不会过滤
#  sensitive-headers: Cookie,Set-Cookie,Authorization

  #这里禁用SendErrorFilter ，不然即使有全局的errorFilter，返回结果也会被覆盖
  SendErrorFilter:
    error:
      disable: true
  # 限流
  ratelimit:
    enabled: true
    repository: redis  #对应存储类型（用来存储统计信息）
    behind-proxy: true  #代理之后
    default-policy-list: #可选 - 针对所有的路由配置的策略，除非特别配置了policies
      - limit: 2 #可选 - 每个刷新时间窗口对应的请求数量限制
#        quota: 1 #可选-  每个刷新时间窗口对应的请求时间限制（秒）
        refresh-interval: 2 # 刷新时间窗口的时间，默认值 (秒)
        type:  #可选 限流方式
#          - url
#          - httpmethod
#          - origin
    policy-list:
      erueka-provider-inner: #这个是zuul-route配置，指定是什么服务
        - limit: 5 #optional - request number limit per refresh interval window
#          quota: 1000 #optional - request time limit per refresh interval window (in seconds)
          refresh-interval: 2 #default value (in seconds)
          type: #optional
            - user
            - origin
            - url
#        - type: #optional value for each type
#            - user=anonymous
#            - origin=somemachine.com
#            - url=/api #url prefix
#            - role=user
#            - http_method=get #case insensitive
#            - http_header=customHeader
#        - type:
#            - url_pattern=/api/*/payment

#hystrix的全局超时时间，有可能是服务挂掉、出错或者超时，会走全局的FallbackProvider，
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            #配置HystrixCommand执行的超时时间，执行超过该时间会进行服务降级处理
            timeoutInMilliseconds: 1000
            #Thread | Semaphore
          strategy: Thread
        #禁止掉Hytrix 的超时时间
#        timeout:
#          enabled: false

#Ribbon的配置来设置路由转发时请求连接及处理的超时时间，这里是上面的路由没问题， 可以找到服务，然后去调用服务后
#这里如果服务处理时间长，然后超时，会走到errorfilter处理
ribbon: #全局配置
  ConnectTimeout: 4000 #服务请求连接超时时间（毫秒）
  ReadTimeout: 4000 #服务请求处理超时时间（毫秒）
